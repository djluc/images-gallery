## versiunea de docker compose pe care o folosim
version: '3'

## serviciile pe care dorim sa le pornim (frontend si api), cu locatia in care se afla fisierele docker pentru fiecare in parte (./frontend si ./api) si apoi porturile
services:
  frontend:
    restart: always
    build: ./frontend
    ports:
      - '3000:3000'
## aici se mapeaza volumele; 
## a doua linie suprascrie folderul app din container cu folderul frontend local;
## prima linie arata ca folderul node_modules din container trebuie pastrat chiar daca el nu se afla in folderul frontend local (a fost instalat direct in container)
    volumes:
      - /app/node_modules
      - ./frontend:/app
    environment:
    - CHOKIDAR_USEPOLLING=true
  api:
    restart: always
    build: ./api
    ports:
      - '5050:5050'
    volumes:
      - ./api:/app
## serviciile pentru mongo si mongo-express
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: very-strong-db-password
    volumes: 
      - mongodb_data:/data/db
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: very-strong-db-password
## arata containerele care trebuie pornite inainte, de care depinde acesta    
    depends_on:
      - mongo  

## se creaza un volum nou in cadrul docker-ului
volumes: 
  mongodb_data: